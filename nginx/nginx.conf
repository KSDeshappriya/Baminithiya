events {
    worker_connections 1024;
}

http {
    upstream Backend {
        server backend1:8000;
        server backend2:8000;
        server backend3:8000;
    }

    # Add MIME types for JavaScript and CSS
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Increase timeouts to handle slower services
    proxy_connect_timeout 75s;
    proxy_read_timeout 300s;

    # Define map to get CORS headers only once
    map $sent_http_access_control_allow_origin $cors_header {
        '' 'http://localhost:5173';
        default $sent_http_access_control_allow_origin;
    }

    server {
        listen 80;
        
        # Health check endpoint
        location /health {
            return 200 'healthy\n';
            add_header Content-Type text/plain;
        }
        
        location /api/ {
            # CORS headers - using add_header only once
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;
            
            proxy_pass http://Backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /public/ {
            # CORS headers for public routes - using add_header only once
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;
            
            proxy_pass http://Backend/public/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Add auth endpoint for login handling with CORS
        location /auth/ {
            # CORS headers - using add_header only once
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Handle preflight requests in a simplified way
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;
            
            proxy_pass http://Backend/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Add private endpoint for protected routes with CORS
        location / {
            # CORS headers - using add_header only once
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;
            
            proxy_pass http://Backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # # Improved WebSocket handling for Vite HMR
        # location ~* ^/(?:@vite/client|@react-refresh|__vite_hmr|socket.io) {
        #     proxy_pass http://frontend:5173;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        #     proxy_set_header Host $host;
        #     proxy_cache_bypass $http_upgrade;
        #     proxy_read_timeout 86400s; # WebSockets can be long-lived
        # }

        # # Proxy all other requests to the frontend
        # location / {
        #     proxy_pass http://frontend:5173;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
            
        #     # Add these headers for any potential WebSocket connections
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        # Add proper error handling
        error_page 502 /502.html;
        location = /502.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
